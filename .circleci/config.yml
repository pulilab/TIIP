version: 2.1

orbs:
  jira: circleci/jira@1.1.0

jobs:
  build-and-test:
    docker:
      - image: circleci/python:3.7.6-stretch-node
        environment:
          PIPENV_VENV_IN_PROJECT: true
          PGHOST: 127.0.0.1
          PGUSER: postgres
          DATABASE_URL: ''
          CI_RUN: True
          REDIS_URL: 127.0.0.1
      - image: circleci/postgres:10.9-alpine-postgis-ram
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
      - image: circleci/redis:5-stretch

    working_directory: ~/tiip

    steps:
      - checkout
      - run: sudo chown -R circleci:circleci /usr/local/bin
      - run: sudo chown -R circleci:circleci /usr/local/lib/python3.7/site-packages

      - restore_cache:
          keys:
            - v7-dependencies-b-{{ checksum "django/requirements.txt" }}

      - restore_cache:
          keys:
            - v3-dependencies-f-{{ checksum "frontend/package.json" }}

      - run:
          name: install python reqs
          working_directory: ~/tiip/django
          command: |
            sudo pip install pipenv
            pipenv install
            pipenv run pip install -r requirements.txt

      - run:
          name: install frontend reqs
          working_directory: ~/tiip/frontend
          command: npm install

#      - run:
#          name: install mapshaper
#          working_directory: ~/tiip
#          command: sudo npm install -g mapshaper

      - save_cache:
          paths:
            - "django/.venv"
            - "/usr/local/bin"
            - "/usr/local/lib/python3.7/site-packages"
            - "./.venv/lib/python3.7/site-packages"
          key: v7-dependencies-b-{{ checksum "django/requirements.txt" }}

      - save_cache:
          paths:
            - frontend/node_modules
          key: v3-dependencies-f-{{ checksum "frontend/package.json" }}

#      - run:
#          name: backend flake8
#          working_directory: ~/tiip/django
#          command: pipenv run flake8
#
#      - run:
#          name: backend makemigrations
#          working_directory: ~/tiip/django
#          command: |
#            pipenv run python manage.py makemigrations --noinput
#
#      - run:
#          name: backend migrations
#          working_directory: ~/tiip/django
#          command: |
#            pipenv run python manage.py migrate
#
#      - run:
#          name: backend unit tests
#          working_directory: ~/tiip/django
#          command: |
#            pipenv run py.test --full-trace --timeout=180 --cov --cov-report html --cov-fail-under 100 --cov-report term-missing --cov-config .coveragerc
#
#      - run:
#          name: backend check for commited migrations
#          working_directory: ~/tiip/django
#          command: |
#            export TERM=xterm && ! git diff --name-status origin/development HEAD | grep /migrations/0 | grep "^A"

      - run:
          name: install gettext
          command: sudo apt-get update && sudo apt-get install -y gettext
      - run:
          name: run translations extraction
          working_directory: ~/tiip/frontend
          command: bash gettext.sh
      - run:
          name: check translations diff
          working_directory: ~/tiip
          command: git status
      - run:
          name: check diff
          command: git diff django/translations/master.pot

  deploy-dev:
    docker:
      - image: circleci/python:3.7.6-stretch
    working_directory: ~/tiip
    steps:
      - checkout
      - run:
          name: Install fabric and pycrypto
          command: |
            sudo pip install pycrypto
            sudo pip install Fabric3==1.10.2.post3
      - run:
          name: Deploy Over SSH
          working_directory: ~/tiip/django
          command: |
            fab dev deploy
          no_output_timeout: "20m"

  deploy-qa:
    docker:
      - image: circleci/python:3.7.6-stretch
    working_directory: ~/tiip
    steps:
      - checkout
      - run:
          name: Install fabric and pycrypto
          command: |
            sudo pip install pycrypto
            sudo pip install Fabric3==1.10.2.post3
      - run:
          name: Deploy Over SSH
          working_directory: ~/tiip/django
          command: |
            fab staging deploy:<< pipeline.git.tag >>
          no_output_timeout: "20m"

  e2e-dev:
    docker:
      - image: cypress/included:4.5.0
    working_directory: ~/tiip
    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: yarn install --frozen-lockfile
      - run:
          name: e2e tests against DEV
          working_directory: ~/tiip/e2e
          command: |
            cypress run -C cypress.dev.json
          no_output_timeout: "20m"
      - store_artifacts:
          path: /root/tiip/e2e/cypress/videos
      - store_artifacts:
          path: /root/tiip/e2e/cypress/screenshots

workflows:
  build-and-deploy:
    jobs:
      - build-and-test:
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*$/
#      - translations-approval:
#          type: approval
#      - translations-commit:
      - deploy-dev:
          requires:
            - build-and-test
          filters:
            branches:
              only: dev
          post-steps:
            - jira/notify:
                environment_type: development
                job_type: deployment
                issue_regexp: '[A-Z0-9]{2,30}-[0-9]+'
                environment: DEV  # DEV, PROD, QA
#      - e2e-dev:
#          requires:
#            - build-and-test
#            - deploy-dev
#          filters:
#            branches:
#              only: dev
      - deploy-qa:
          name: QA Server Deployment
          requires:
            - build-and-test
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+(\.[0-9]+)*$/
          post-steps:
            - jira/notify:
                environment_type: staging
                job_type: deployment
                issue_regexp: '[A-Z0-9]{2,30}-[0-9]+'
                environment: QA  # DEV, PROD, QA
